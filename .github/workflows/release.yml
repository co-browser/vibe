name: Release

on:
  push:
    branches: [main]
  pull_request:
    types: [closed]
    branches: [main]
  workflow_dispatch: # Allow manual triggers

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write
  packages: write
  attestations: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

# Set global timeout following best practices
defaults:
  run:
    shell: bash

jobs:
  # Determine if a release is needed
  check-release:
    name: Check for Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: |
      github.event_name == 'push' && 
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, 'chore(release)')
    outputs:
      should_release: ${{ steps.semantic-release-check.outputs.new_release_published }}
      version: ${{ steps.semantic-release-check.outputs.new_release_version }}
      notes: ${{ steps.semantic-release-check.outputs.new_release_notes }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          # Use a Personal Access Token to trigger subsequent workflows
          token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: "20"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: 10.12.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check if release is needed
        id: semantic-release-check
        uses: cycjimmy/semantic-release-action@b1b432f13acb7768e0c8efdec416d363a57546f2 # v4.1.1
        with:
          semantic_version: 24
          dry_run: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Create release PR when a release is needed
  create-release-pr:
    name: Create Release PR
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: 10.12.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create Release Branch
        id: create-branch
        run: |
          RELEASE_BRANCH="release/v${{ needs.check-release.outputs.version }}"
          git checkout -b "$RELEASE_BRANCH"
          echo "branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT

      - name: Generate Release Assets
        run: |
          # Create VERSION file
          echo "${{ needs.check-release.outputs.version }}" > VERSION

          # Update CHANGELOG.md with release notes
          if [[ ! -f CHANGELOG.md ]]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Prepend new release notes to CHANGELOG.md
          {
            echo "# Changelog"
            echo ""
            echo "## [${{ needs.check-release.outputs.version }}] - $(date '+%Y-%m-%d')"
            echo ""
            echo "${{ needs.check-release.outputs.notes }}"
            echo ""
            tail -n +3 CHANGELOG.md 2>/dev/null || true
          } > CHANGELOG.md.tmp && mv CHANGELOG.md.tmp CHANGELOG.md

      - name: Commit Release Changes
        run: |
          # Add the generated files
          git add VERSION CHANGELOG.md

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 1
          fi

          # Commit and push changes
          git commit -m "chore(release): prepare v${{ needs.check-release.outputs.version }} [skip ci]"
          git push origin "${{ steps.create-branch.outputs.branch }}"

      - name: Create Pull Request
        id: create-pr
        uses: peter-evans/create-pull-request@5e914681df9dc83aa4e4905692ca88beb2f9e91f # v7.0.5
        with:
          token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
          branch: ${{ steps.create-branch.outputs.branch }}
          base: main
          title: "chore(release): v${{ needs.check-release.outputs.version }}"
          body: |
            ## üöÄ Release v${{ needs.check-release.outputs.version }}

            This PR contains the automated release changes for version **v${{ needs.check-release.outputs.version }}**.

            ### üìù Release Notes
            ${{ needs.check-release.outputs.notes }}

            ### üì¶ Changes
            - Updated `VERSION` to ${{ needs.check-release.outputs.version }}
            - Updated `CHANGELOG.md` with release notes

            ### ‚úÖ Checklist
            - [ ] Review the changelog entries
            - [ ] Verify version bump is correct
            - [ ] Ensure all tests pass

            ---
            ü§ñ *This PR was automatically created by the release workflow.*
          labels: |
            release
            automated

      - name: Enable Auto-merge
        if: steps.create-pr.outputs.pull-request-number
        run: |
          gh pr merge --auto --squash "${{ steps.create-pr.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

  # Publish the release after PR is merged
  publish-release:
    name: Publish Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: |
      github.event_name == 'pull_request' && 
      github.event.action == 'closed' && 
      github.event.pull_request.merged == true && 
      startsWith(github.event.pull_request.head.ref, 'release/')
    outputs:
      released: ${{ steps.semantic-release.outputs.new_release_published }}
      version: ${{ steps.semantic-release.outputs.new_release_version }}
      notes: ${{ steps.semantic-release.outputs.new_release_notes }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          token: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@fe02b34f77f8bc703788d5817da081398fad5dd2 # v4.0.0
        with:
          version: 10.12.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Publish Release
        id: semantic-release
        uses: cycjimmy/semantic-release-action@b1b432f13acb7768e0c8efdec416d363a57546f2 # v4.1.1
        with:
          semantic_version: 24
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}

  # Notify Discord on successful release
  notify-discord:
    name: Discord Notification
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: publish-release
    if: |
      always() && 
      needs.publish-release.result == 'success' && 
      needs.publish-release.outputs.released == 'true'
    steps:
      - name: Send Discord Notification
        uses: Ilshidur/action-discord@0c4b27844ba47cb1c7bee539c8eead5284ce9fa9 # 0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            üöÄ **New Release: v${{ needs.publish-release.outputs.version }}**

            üì¶ **Repository:** ${{ github.repository }}
            üìã **Release Notes:** ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.publish-release.outputs.version }}

            ‚ú® **Highlights:**
            ${{ needs.publish-release.outputs.notes }}

            ---
            [View Release](${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.publish-release.outputs.version }}) | [View Changelog](${{ github.server_url }}/${{ github.repository }}/blob/main/CHANGELOG.md)
