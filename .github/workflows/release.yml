name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write
  packages: write
  attestations: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Run CI validation first
  validate:
    name: Validate Build
    uses: ./.github/workflows/ci.yml
    secrets: inherit

  # Determine if a release should be made
  version-check:
    name: Version Check
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      new_release_published: ${{ steps.semantic-release.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic-release.outputs.new_release_version }}
      new_release_git_tag: ${{ steps.semantic-release.outputs.new_release_git_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.1.4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Semantic Release (Dry Run)
        id: semantic-release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 24
          dry_run: true
          extra_plugins: |
            conventional-changelog-conventionalcommits@8
            semantic-release-export-data@1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build the application with determined version
  build:
    name: Build Application
    runs-on: macos-latest
    needs: version-check
    if: needs.version-check.outputs.new_release_published == 'true'
    env:
      RELEASE_VERSION: ${{ needs.version-check.outputs.new_release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.1.4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: build, sign, notarize, staple DMG
        env:
          VIBE_VERSION: ${{ env.RELEASE_VERSION }}
          #the password for cert.p12
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          #csc_link is    CSC_LINK=$(openssl base64 -in cert.p12
          CSC_LINK: ${{ secrets.CSC_LINK }}
          #dev email
          APPLE_ID: ${{ secrets.APPLE_ID }}
          #mandatory app password, not reg password
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          #apple dev team id
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "Building version: $VIBE_VERSION"
          pnpm run build:mac
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vibe-desktop-${{ env.RELEASE_VERSION }}
          path: |
            apps/electron-app/dist/vibe-*.dmg
          retention-days: 30

  # Create the actual release with artifacts
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      released: ${{ steps.semantic-release.outputs.new_release_published }}
      version: ${{ steps.semantic-release.outputs.new_release_version }}
      notes: ${{ steps.semantic-release.outputs.new_release_notes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.1.4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Semantic Release
        id: semantic-release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 24
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify Discord on successful release
  notify:
    name: Discord Notification
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.released == 'true'
    steps:
      - name: Send Discord Notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            ðŸš€ **New Release: v${{ needs.release.outputs.version }}**

            Repository: **${{ github.repository }}**
            Release Notes: ${{ github.server_url }}/${{ github.repository }}/releases/tag/v${{ needs.release.outputs.version }}

            ${{ needs.release.outputs.notes }}
